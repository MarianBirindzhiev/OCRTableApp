name: Build and Release OCR App (macOS)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-macos:
    strategy:
      matrix:
        include:
          - os: macos-13
            artifact-name: "SnapTable-macOS-x64"
            arch: "x64"
          - os: macos-latest
            artifact-name: "SnapTable-macOS-arm64" 
            arch: "arm64"
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip

          # Force Intel-specific numpy/scipy installation for Intel builds
          if [ "${{ matrix.arch }}" == "x64" ]; then
            echo "Installing Intel-specific dependencies..."
            pip install --no-cache-dir --force-reinstall numpy scipy
            pip install --no-cache-dir torch torchvision --index-url https://download.pytorch.org/whl/cpu
          fi

          pip install -r requirements.txt
          pip install pyinstaller

      - name: üîç Verify Python and numpy installation (${{ matrix.arch }})
        run: |
          echo "=== Python and Architecture Info ==="
          python -c "import sys; print(f'Python version: {sys.version}')"
          python -c "import platform; print(f'Architecture: {platform.machine()}')"
          
          echo "=== NumPy verification ==="
          python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
          python -c "import numpy; print(f'NumPy file location: {numpy.__file__}')"
          
          echo "=== EasyOCR dependencies check ==="
          python -c "import torch; print(f'PyTorch version: {torch.__version__}')" || echo "PyTorch not available"
          python -c "import cv2; print(f'OpenCV version: {cv2.__version__}')" || echo "OpenCV not available"

      - name: üì• Pre-download and prepare EasyOCR models properly
        run: |
          python - <<'EOF'
          import easyocr
          import os
          import shutil
          import zipfile
          
          print("=== Downloading EasyOCR models ===")
          # Initialize EasyOCR to download models
          reader = easyocr.Reader(['en'], download_enabled=True)
          print("‚úÖ EasyOCR models downloaded")
          
          # Find the actual model directory
          easyocr_home = os.path.expanduser("~/.EasyOCR")
          print(f"EasyOCR home: {easyocr_home}")
          
          # Create bundle models directory
          bundle_models_dir = 'models'
          os.makedirs(bundle_models_dir, exist_ok=True)
          
          # Extract and copy model files properly
          model_dir = os.path.join(easyocr_home, 'model')
          if os.path.exists(model_dir):
              print(f"Found model directory: {model_dir}")
              
              # List all files in model directory
              for item in os.listdir(model_dir):
                  item_path = os.path.join(model_dir, item)
                  print(f"Found: {item}")
                  
                  if item.endswith('.zip'):
                      # Extract zip files to get .pth files
                      print(f"Extracting {item}")
                      with zipfile.ZipFile(item_path, 'r') as zip_ref:
                          zip_ref.extractall(bundle_models_dir)
                  elif item.endswith('.pth'):
                      # Copy .pth files directly
                      shutil.copy2(item_path, bundle_models_dir)
                      print(f"Copied {item}")
          
          # Copy any additional model structure
          for root, dirs, files in os.walk(easyocr_home):
              for file in files:
                  if file.endswith('.pth'):
                      src_path = os.path.join(root, file)
                      rel_path = os.path.relpath(src_path, easyocr_home)
                      dest_path = os.path.join(bundle_models_dir, rel_path)
                      os.makedirs(os.path.dirname(dest_path), exist_ok=True)
                      shutil.copy2(src_path, dest_path)
                      print(f"Copied model file: {rel_path}")
          
          print("=== Final model bundle contents ===")
          for root, dirs, files in os.walk(bundle_models_dir):
              for file in files:
                  print(f"Bundle contains: {os.path.join(root, file)}")
          EOF

      - name: üîç Verify model files before bundling
        run: |
          echo "=== Checking for required EasyOCR model files (${{ matrix.arch }}) ==="
          ls -la models/
          find models -name "*.pth" -exec ls -la {} \;
          
          # Check for specific required files
          if [ -f "models/craft_mlt_25k.pth" ]; then
              echo "‚úÖ Detection model found"
          else
              echo "‚ùå Detection model missing"
              exit 1
          fi
          
          if [ -f "models/english_g2.pth" ]; then
              echo "‚úÖ English recognition model found"
          else
              echo "‚ùå English recognition model missing"
              exit 1
          fi

      - name: üèóÔ∏è Build executable with PyInstaller (${{ matrix.arch }})
        run: |
          pyinstaller --name SnapTable --windowed --icon=assets/logo.icns \
            --add-data "models:models" \
            --collect-all easyocr \
            --collect-all numpy \ 
            --hidden-import numpy \ 
            main.py
          ls dist

      - name: ‚úçÔ∏è Modify Info.plist for needed permissions
        run: |
          /usr/libexec/PlistBuddy -c "Add :NSScreenCaptureUsageDescription string 'SnapTable needs screen capture access for OCR features.'" dist/SnapTable.app/Contents/Info.plist

      - name: ‚úçÔ∏è Force Light Theme in Info.plist
        run: |
          /usr/libexec/PlistBuddy -c "Add :NSRequiresAquaSystemAppearance bool true" dist/SnapTable.app/Contents/Info.plist

      - name: üì¶ Create architecture-specific release package
        run: |
          cd dist
          zip -r ${{ matrix.artifact-name }}.zip SnapTable.app

      - name: üîç Verify final app bundle structure (${{ matrix.arch }})
        run: |
          echo "=== App bundle structure verification (${{ matrix.arch }}) ==="
          
          if [ ! -d "dist/SnapTable.app" ]; then
              echo "‚ùå App bundle not found"
              exit 1
          fi
          
          echo "‚úÖ App bundle created for ${{ matrix.arch }}"
          ls -la dist/
          
          # Check bundle size
          du -sh dist/SnapTable.app
          du -sh dist/${{ matrix.artifact-name }}.zip

      - name: üöÄ Upload App to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "SnapTable v${{ github.ref_name }}"
          files: dist/${{ matrix.artifact-name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
