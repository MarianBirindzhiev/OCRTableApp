name: Build and Release OCR App (Windows)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: üì• Pre-download and prepare EasyOCR models properly
        shell: pwsh
        run: |
          $pythonScript = @'
          import easyocr
          import os
          import shutil
          import zipfile
          
          print("=== Downloading EasyOCR models ===")
          # Initialize EasyOCR to download models
          reader = easyocr.Reader(['en'], download_enabled=True)
          print("‚úÖ EasyOCR models downloaded")
          
          # Find the actual model directory
          easyocr_home = os.path.expanduser("~/.EasyOCR")
          print(f"EasyOCR home: {easyocr_home}")
          
          # Create bundle models directory
          bundle_models_dir = 'models'
          os.makedirs(bundle_models_dir, exist_ok=True)
          
          # Extract and copy model files properly
          model_dir = os.path.join(easyocr_home, 'model')
          if os.path.exists(model_dir):
              print(f"Found model directory: {model_dir}")
              
              # List all files in model directory
              for item in os.listdir(model_dir):
                  item_path = os.path.join(model_dir, item)
                  print(f"Found: {item}")
                  
                  if item.endswith('.zip'):
                      # Extract zip files to get .pth files
                      print(f"Extracting {item}")
                      with zipfile.ZipFile(item_path, 'r') as zip_ref:
                          zip_ref.extractall(bundle_models_dir)
                  elif item.endswith('.pth'):
                      # Copy .pth files directly
                      shutil.copy2(item_path, bundle_models_dir)
                      print(f"Copied {item}")
          
          # Copy any additional model structure
          for root, dirs, files in os.walk(easyocr_home):
              for file in files:
                  if file.endswith('.pth'):
                      src_path = os.path.join(root, file)
                      rel_path = os.path.relpath(src_path, easyocr_home)
                      dest_path = os.path.join(bundle_models_dir, rel_path)
                      os.makedirs(os.path.dirname(dest_path), exist_ok=True)
                      shutil.copy2(src_path, dest_path)
                      print(f"Copied model file: {rel_path}")
          
          print("=== Final model bundle contents ===")
          for root, dirs, files in os.walk(bundle_models_dir):
              for file in files:
                  print(f"Bundle contains: {os.path.join(root, file)}")
          '@
          
          # Execute the Python script
          python -c $pythonScript

      - name: üîç Verify model files before bundling
        shell: pwsh
        run: |
          Write-Host "=== Checking for required EasyOCR model files ==="
          Get-ChildItem -Path "models" -Recurse | Format-Table Name, Length, FullName
          
          if (Test-Path "models\craft_mlt_25k.pth") {
              Write-Host "‚úÖ Detection model found"
              Get-Item "models\craft_mlt_25k.pth" | Format-List
          } else {
              Write-Host "‚ùå Detection model missing"
              exit 1
          }
          
          if (Test-Path "models\english_g2.pth") {
              Write-Host "‚úÖ English recognition model found"
              Get-Item "models\english_g2.pth" | Format-List
          } else {
              Write-Host "‚ùå English recognition model missing"
              exit 1
          }

      - name: üèóÔ∏è Build executable with PyInstaller
        shell: pwsh
        run: |
          pyinstaller --name SnapTable --onefile --windowed --icon=assets/logo.ico `
            --add-data "models;models" `
            --collect-all easyocr `
            main.py

      - name: üîç Verify final executable bundle structure
        shell: pwsh
        run: |
          Write-Host "=== Executable bundle structure verification ==="
          
          if (-not (Test-Path "dist\SnapTable.exe")) {
              Write-Host "‚ùå Executable not found"
              exit 1
          }
          
          Write-Host "‚úÖ Executable created"
          Get-Item "dist\SnapTable.exe" | Format-List

      - name: üß™ Test executable functionality
        shell: pwsh
        run: |
          Write-Host "=== Testing executable ==="
          
          # Test if the executable can start (with timeout)
          $process = Start-Process -FilePath "dist\SnapTable.exe" -ArgumentList "--help" -PassThru -NoNewWindow
          $process | Wait-Process -Timeout 10 -ErrorAction SilentlyContinue
          
          if ($process.HasExited) {
              Write-Host "‚úÖ Executable test passed"
          } else {
              Write-Host "‚ö†Ô∏è Executable test timed out (may be normal for GUI apps)"
              $process | Stop-Process -Force
          }

      - name: üì¶ Create release package
        shell: pwsh
        run: |
          # Create a zip package for easier distribution
          Compress-Archive -Path "dist\SnapTable.exe" -DestinationPath "dist\SnapTable-Windows.zip"

      - name: üöÄ Upload App to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "SnapTable v${{ github.ref_name }}"
          files: |
            dist/SnapTable.exe
            dist/SnapTable-Windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
